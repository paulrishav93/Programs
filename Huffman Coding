#include <iostream>
#include <vector>
#include <queue>

using namespace std;

typedef pair<int,char> ci;

class node
{

public:
    int data;
    char ch;
    node *left;
    node *right;

    node(char ch,int data)
    {
        this->data=data;
        this->ch=ch;
        left=0;
        right=0;
    }
};

void printArray(vector<int> a, int top)
{
    for(int i=0;i<top;++i)
        cout<<a[i];

    cout<<endl;
}

void printCodes(node *root, vector<int> a, int top)
{
    if(root->left)
    {
        a[top]=0;
        printCodes(root->left,a,top+1);
    }

    if(root->right)
    {
        a[top]=1;
        printCodes(root->right,a,top+1);
    }

    if(!root->left && !root->right)
    {
        cout<<root->ch<<":";
        printArray(a,top);
    }
}

struct cmp
{
    bool operator ()(const node *a, const node *b)
    {
        return a->data > b->data;
    }
};

void huffman(vector<char> a, vector<int> freq)
{
    priority_queue< node*, vector<node*>, cmp > mypq;

    node *left,*right,*top;

    int l=a.size();

    for(int i=0;i<l;++i)
    {

        mypq.push(new node(a[i],freq[i]));
    }

    while(mypq.size()!=1)
    {
        left=mypq.top();
        mypq.pop();
        right=mypq.top();
        mypq.pop();

        top=new node('$',left->data+right->data);
        top->left=left;
        top->right=right;

        mypq.push(top);
    }

    node* root=mypq.top();

    vector<int> arr;
    arr.resize(100);

    printCodes(root,arr,0);
}

int main()
{
    vector<char> arr;
    arr.push_back('a');arr.push_back('b');arr.push_back('c');arr.push_back('d');arr.push_back('e');arr.push_back('f');

    vector<int> freq;
    freq.push_back(5);freq.push_back(9);freq.push_back(12);freq.push_back(13);freq.push_back(16);freq.push_back(45);

    huffman(arr,freq);

    return 0;
}
